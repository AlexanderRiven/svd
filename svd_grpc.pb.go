// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package svd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SVDSrvClient is the client API for SVDSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SVDSrvClient interface {
	GetSVDConf(ctx context.Context, in *SvdCode, opts ...grpc.CallOption) (*SVDConf, error)
}

type sVDSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewSVDSrvClient(cc grpc.ClientConnInterface) SVDSrvClient {
	return &sVDSrvClient{cc}
}

func (c *sVDSrvClient) GetSVDConf(ctx context.Context, in *SvdCode, opts ...grpc.CallOption) (*SVDConf, error) {
	out := new(SVDConf)
	err := c.cc.Invoke(ctx, "/svd.SVDSrv/GetSVDConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SVDSrvServer is the server API for SVDSrv service.
// All implementations must embed UnimplementedSVDSrvServer
// for forward compatibility
type SVDSrvServer interface {
	GetSVDConf(context.Context, *SvdCode) (*SVDConf, error)
	mustEmbedUnimplementedSVDSrvServer()
}

// UnimplementedSVDSrvServer must be embedded to have forward compatible implementations.
type UnimplementedSVDSrvServer struct {
}

func (UnimplementedSVDSrvServer) GetSVDConf(context.Context, *SvdCode) (*SVDConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSVDConf not implemented")
}
func (UnimplementedSVDSrvServer) mustEmbedUnimplementedSVDSrvServer() {}

// UnsafeSVDSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SVDSrvServer will
// result in compilation errors.
type UnsafeSVDSrvServer interface {
	mustEmbedUnimplementedSVDSrvServer()
}

func RegisterSVDSrvServer(s grpc.ServiceRegistrar, srv SVDSrvServer) {
	s.RegisterService(&SVDSrv_ServiceDesc, srv)
}

func _SVDSrv_GetSVDConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvdCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SVDSrvServer).GetSVDConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svd.SVDSrv/GetSVDConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SVDSrvServer).GetSVDConf(ctx, req.(*SvdCode))
	}
	return interceptor(ctx, in, info, handler)
}

// SVDSrv_ServiceDesc is the grpc.ServiceDesc for SVDSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SVDSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svd.SVDSrv",
	HandlerType: (*SVDSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSVDConf",
			Handler:    _SVDSrv_GetSVDConf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svd.proto",
}
