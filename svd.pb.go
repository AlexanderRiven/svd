//*******************************************************************
//  Copyright (C) 2021  by  Oleg Shirokov   oleg@shirokov.online    *
//******************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: svd.proto

package svd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//  ----------------------------------------
type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_svd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_svd_proto_rawDescGZIP(), []int{0}
}

// Ответ -----------------------------------
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=Err,proto3" json:"Err,omitempty"`
	Msg string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_svd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_svd_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

//  ----------------------------------------
type SvdCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *SvdCode) Reset() {
	*x = SvdCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvdCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvdCode) ProtoMessage() {}

func (x *SvdCode) ProtoReflect() protoreflect.Message {
	mi := &file_svd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvdCode.ProtoReflect.Descriptor instead.
func (*SvdCode) Descriptor() ([]byte, []int) {
	return file_svd_proto_rawDescGZIP(), []int{2}
}

func (x *SvdCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

//  ----------------------------------------
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TMU   int64  `protobuf:"varint,1,opt,name=TMU,proto3" json:"TMU,omitempty"`    // время расчета данных
	Group string `protobuf:"bytes,2,opt,name=Group,proto3" json:"Group,omitempty"` // группа (текучка, архивы, события)
	Param string `protobuf:"bytes,3,opt,name=Param,proto3" json:"Param,omitempty"` // идентификатор параметра
	Type  string `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`   // тип значения ( f, d, s, err)
	Value string `protobuf:"bytes,5,opt,name=Value,proto3" json:"Value,omitempty"` // значение
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_svd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_svd_proto_rawDescGZIP(), []int{3}
}

func (x *Metric) GetTMU() int64 {
	if x != nil {
		return x.TMU
	}
	return 0
}

func (x *Metric) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Metric) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *Metric) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Metric) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// конфигурация взаимодействия - cценарий --
type Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdID string   `protobuf:"bytes,1,opt,name=CmdID,proto3" json:"CmdID,omitempty"` // идентификатор для APP
	CMD   []string `protobuf:"bytes,2,rep,name=CMD,proto3" json:"CMD,omitempty"`     // команды сценария
}

func (x *Script) Reset() {
	*x = Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_svd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_svd_proto_rawDescGZIP(), []int{4}
}

func (x *Script) GetCmdID() string {
	if x != nil {
		return x.CmdID
	}
	return ""
}

func (x *Script) GetCMD() []string {
	if x != nil {
		return x.CMD
	}
	return nil
}

// конфигурация устройства  ----------------
type DevConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PID              string  `protobuf:"bytes,1,opt,name=PID,proto3" json:"PID,omitempty"`                            // Идентификатор родительского устройства (провайдер)
	UID              string  `protobuf:"bytes,2,opt,name=UID,proto3" json:"UID,omitempty"`                            // Уникальный идентификатор дочернего устройства
	Addr             uint32  `protobuf:"varint,3,opt,name=Addr,proto3" json:"Addr,omitempty"`                         // Адрес на линии
	Prms             string  `protobuf:"bytes,4,opt,name=Prms,proto3" json:"Prms,omitempty"`                          // любые параметры: пароль доступа, или ещё что.
	DeviceSyncPeriod uint32  `protobuf:"varint,5,opt,name=DeviceSyncPeriod,proto3" json:"DeviceSyncPeriod,omitempty"` // Период синхронизации c устройством - получение текущих данных
	Scripts          *Script `protobuf:"bytes,6,opt,name=Scripts,proto3" json:"Scripts,omitempty"`                    // сценарий взаимодействия
}

func (x *DevConf) Reset() {
	*x = DevConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevConf) ProtoMessage() {}

func (x *DevConf) ProtoReflect() protoreflect.Message {
	mi := &file_svd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevConf.ProtoReflect.Descriptor instead.
func (*DevConf) Descriptor() ([]byte, []int) {
	return file_svd_proto_rawDescGZIP(), []int{5}
}

func (x *DevConf) GetPID() string {
	if x != nil {
		return x.PID
	}
	return ""
}

func (x *DevConf) GetUID() string {
	if x != nil {
		return x.UID
	}
	return ""
}

func (x *DevConf) GetAddr() uint32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *DevConf) GetPrms() string {
	if x != nil {
		return x.Prms
	}
	return ""
}

func (x *DevConf) GetDeviceSyncPeriod() uint32 {
	if x != nil {
		return x.DeviceSyncPeriod
	}
	return 0
}

func (x *DevConf) GetScripts() *Script {
	if x != nil {
		return x.Scripts
	}
	return nil
}

// конфигурация сервиса  -------------------
type SVDConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        uint32 `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`               // Состояние сессии
	Version       string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`              // Версия конфига
	SvdCode       string `protobuf:"bytes,3,opt,name=SvdCode,proto3" json:"SvdCode,omitempty"`              // Код сервера взаимодействия
	TCPPort       string `protobuf:"bytes,4,opt,name=TCPPort,proto3" json:"TCPPort,omitempty"`              // Входной TCP порт для устройств
	GRPCServ      string `protobuf:"bytes,5,opt,name=GRPCServ,proto3" json:"GRPCServ,omitempty"`            // gRPC Адрес шлюза
	DebugLevel    uint32 `protobuf:"varint,6,opt,name=DebugLevel,proto3" json:"DebugLevel,omitempty"`       // уровень логирования
	MainLoopDelay uint32 `protobuf:"varint,7,opt,name=MainLoopDelay,proto3" json:"MainLoopDelay,omitempty"` // Задержка в секундах цикла проверки
	// Session
	SessionDelayBegin  uint32 `protobuf:"varint,8,opt,name=SessionDelayBegin,proto3" json:"SessionDelayBegin,omitempty"`    // Задержать начало сессии в секундах
	SessionDelayExit   uint32 `protobuf:"varint,9,opt,name=SessionDelayExit,proto3" json:"SessionDelayExit,omitempty"`      // Задержать завершение сессии для тормозных корректоров (для ек270 = 120 сек.)
	SessionSafeKeeping uint32 `protobuf:"varint,10,opt,name=SessionSafeKeeping,proto3" json:"SessionSafeKeeping,omitempty"` // хранение сессии в минутах
	// Devices
	DeviceSyncPeriod uint32     `protobuf:"varint,11,opt,name=DeviceSyncPeriod,proto3" json:"DeviceSyncPeriod,omitempty"` // Период синхронизации c устройством - получение текущих данных
	DevConfList      []*DevConf `protobuf:"bytes,12,rep,name=DevConfList,proto3" json:"DevConfList,omitempty"`            // Информация об устройствах
}

func (x *SVDConf) Reset() {
	*x = SVDConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SVDConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SVDConf) ProtoMessage() {}

func (x *SVDConf) ProtoReflect() protoreflect.Message {
	mi := &file_svd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SVDConf.ProtoReflect.Descriptor instead.
func (*SVDConf) Descriptor() ([]byte, []int) {
	return file_svd_proto_rawDescGZIP(), []int{6}
}

func (x *SVDConf) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SVDConf) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SVDConf) GetSvdCode() string {
	if x != nil {
		return x.SvdCode
	}
	return ""
}

func (x *SVDConf) GetTCPPort() string {
	if x != nil {
		return x.TCPPort
	}
	return ""
}

func (x *SVDConf) GetGRPCServ() string {
	if x != nil {
		return x.GRPCServ
	}
	return ""
}

func (x *SVDConf) GetDebugLevel() uint32 {
	if x != nil {
		return x.DebugLevel
	}
	return 0
}

func (x *SVDConf) GetMainLoopDelay() uint32 {
	if x != nil {
		return x.MainLoopDelay
	}
	return 0
}

func (x *SVDConf) GetSessionDelayBegin() uint32 {
	if x != nil {
		return x.SessionDelayBegin
	}
	return 0
}

func (x *SVDConf) GetSessionDelayExit() uint32 {
	if x != nil {
		return x.SessionDelayExit
	}
	return 0
}

func (x *SVDConf) GetSessionSafeKeeping() uint32 {
	if x != nil {
		return x.SessionSafeKeeping
	}
	return 0
}

func (x *SVDConf) GetDeviceSyncPeriod() uint32 {
	if x != nil {
		return x.DeviceSyncPeriod
	}
	return 0
}

func (x *SVDConf) GetDevConfList() []*DevConf {
	if x != nil {
		return x.DevConfList
	}
	return nil
}

var File_svd_proto protoreflect.FileDescriptor

var file_svd_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x76, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x73, 0x76, 0x64,
	0x22, 0x06, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x2e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x45, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x22, 0x1d, 0x0a, 0x07, 0x53, 0x76, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x4d, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x54, 0x4d, 0x55, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x43, 0x6d, 0x64, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x4d, 0x44,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x43, 0x4d, 0x44, 0x22, 0xa8, 0x01, 0x0a, 0x07,
	0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x72, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x25, 0x0a, 0x07, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x73, 0x76, 0x64, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x07, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x22, 0xb7, 0x03, 0x0a, 0x07, 0x53, 0x56, 0x44, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x76, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x76, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x43, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x54, 0x43, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x52, 0x50, 0x43,
	0x53, 0x65, 0x72, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x52, 0x50, 0x43,
	0x53, 0x65, 0x72, 0x76, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x4c, 0x6f, 0x6f, 0x70,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4d, 0x61, 0x69,
	0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x45, 0x78, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x61, 0x66, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x66, 0x65, 0x4b, 0x65, 0x65,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x2e, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x76, 0x64, 0x2e, 0x44, 0x65, 0x76, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74,
	0x32, 0x34, 0x0a, 0x06, 0x53, 0x56, 0x44, 0x53, 0x72, 0x76, 0x12, 0x2a, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x53, 0x56, 0x44, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x0c, 0x2e, 0x73, 0x76, 0x64, 0x2e, 0x53,
	0x76, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x0c, 0x2e, 0x73, 0x76, 0x64, 0x2e, 0x53, 0x56, 0x44,
	0x43, 0x6f, 0x6e, 0x66, 0x22, 0x00, 0x42, 0x17, 0x5a, 0x15, 0x67, 0x70, 0x6d, 0x72, 0x67, 0x65,
	0x2e, 0x73, 0x76, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x73, 0x76, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svd_proto_rawDescOnce sync.Once
	file_svd_proto_rawDescData = file_svd_proto_rawDesc
)

func file_svd_proto_rawDescGZIP() []byte {
	file_svd_proto_rawDescOnce.Do(func() {
		file_svd_proto_rawDescData = protoimpl.X.CompressGZIP(file_svd_proto_rawDescData)
	})
	return file_svd_proto_rawDescData
}

var file_svd_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_svd_proto_goTypes = []interface{}{
	(*Null)(nil),     // 0: svd.Null
	(*Response)(nil), // 1: svd.Response
	(*SvdCode)(nil),  // 2: svd.SvdCode
	(*Metric)(nil),   // 3: svd.Metric
	(*Script)(nil),   // 4: svd.Script
	(*DevConf)(nil),  // 5: svd.DevConf
	(*SVDConf)(nil),  // 6: svd.SVDConf
}
var file_svd_proto_depIdxs = []int32{
	4, // 0: svd.DevConf.Scripts:type_name -> svd.Script
	5, // 1: svd.SVDConf.DevConfList:type_name -> svd.DevConf
	2, // 2: svd.SVDSrv.GetSVDConf:input_type -> svd.SvdCode
	6, // 3: svd.SVDSrv.GetSVDConf:output_type -> svd.SVDConf
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_svd_proto_init() }
func file_svd_proto_init() {
	if File_svd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvdCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SVDConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svd_proto_goTypes,
		DependencyIndexes: file_svd_proto_depIdxs,
		MessageInfos:      file_svd_proto_msgTypes,
	}.Build()
	File_svd_proto = out.File
	file_svd_proto_rawDesc = nil
	file_svd_proto_goTypes = nil
	file_svd_proto_depIdxs = nil
}
